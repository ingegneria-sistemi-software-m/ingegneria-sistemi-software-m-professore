/* Generated by AN DISI Unibo */ 
package it.unibo.aserviceusage

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Aserviceusage ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		  
			fun discover(){
				val res = CommUtils.ckeckEureka( )
				CommUtils.outblue("discover $res ")
				if( CommUtils.ckeckEureka( ) ){
					//EurekaClient eurekaClient = CommUtils.createEurekaClient();  
					val hostPort = CommUtils.discoverService( "ctxeureka" )
					CommUtils.outblue("discover host=${hostPort[0]} port=${hostPort[1]}")
					//CommUtils.outblue("discover $hostPort ")
				}
			}
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						
									CommUtils.ckeckEureka();
									val hostPort = CommUtils.discoverService( "ctxeureka",  )
									//CommUtils.outblue("discover host=${hostPort[0]} port=${hostPort[1]}")	
									CommUtils.outblue("discover $hostPort")		
						CommUtils.outmagenta("$name | STARTS")
						delay(1000) 
						request("r1", "r1(0)" ,"aservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outcyan("$name | waiting ... ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handlereply",cond=whenReply("r1reply"))
					transition(edgeName="t01",targetState="handleAlarm",cond=whenEvent("alarm"))
				}	 
				state("handlereply") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outblack("$name | emit alarm(caller)")
						emit("alarm", "alarm(caller)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleAlarm",cond=whenEvent("alarm"))
				}	 
				state("handleAlarm") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 

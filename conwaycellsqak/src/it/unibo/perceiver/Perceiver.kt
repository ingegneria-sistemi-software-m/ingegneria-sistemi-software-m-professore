/* Generated by AN DISI Unibo */ 
package it.unibo.perceiver

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Perceiver ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 val guiinterpreter = main.java.CellCmdTranslator( myself )  
		 		
		 		//CAMBIO NOME PER EVITARE rigetti di connessione MQTT
		 		name = name+kotlin.random.Random.nextInt(0, 501)
		 		
		 		var CellLifeName = "unknown"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name | STARTS ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t032",targetState="setCellLifeName",cond=whenEvent("cellLifeName"))
				}	 
				state("setCellLifeName") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cellLifeName(NAME)"), Term.createTerm("cellLifeName(NAME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CellLifeName = payloadArg(0)  
						}
						CommUtils.outblue("$name | CellLifeName=$CellLifeName ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t033",targetState="handleCtrlMsg",cond=whenEvent("kernel_rawmsg"))
				}	 
				state("handleCtrlMsg") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("kernel_rawmsg(ARG)"), Term.createTerm("kernel_rawmsg(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val ApplMsg = guiinterpreter.cvtToApplicMessage( payloadArg(0) ) 
								               if( ApplMsg != null ) sendMessageToActor(ApplMsg,CellLifeName)
								CommUtils.outblack("$name | sent $ApplMsg")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 

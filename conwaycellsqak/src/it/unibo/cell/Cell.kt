/* Generated by AN DISI Unibo */ 
package it.unibo.cell

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.*

class Cell ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
			   var MyState     = false
			   var Countnb     = 0  //numero dei vicini
			   var Countnbon   = 0  //numero degli stati on dei vicini
			   var Countnbmsgs = 0  //numero dei msg ricevuti dai vicini	  
			   var  X          = 1  //SET A-PRIORI
			   var  Y          = 1  //SET A-PRIORI
		 	   var XD          = 2  //SET A-PRIORI
		 	   var YD          = 2  //SET A-PRIORI
			   
			   lateinit  var outindev  : OutInCellGui  
			   val guiinterpreter = main.java.CellCmdTranslator( myself )  //ADDED
		 		
		 	//CAMBIO SUBITO IL NOME
		 	   name = name+kotlin.random.Random.nextInt(0, 501)
		 	   MyName=name
		 		 
		  fun setCellCoords( )  {
		     val coords = name.replace("cell_","").split("_")  //Before cellc
		     X = coords[0].toInt()
		     XD = X+1
		     Y  = coords[1].toInt()        
		     YD =Y+1
		  }
		  
		  fun displayOnGui(){ 
			val V   = if (MyState) 1 else 0  
			val msg = "cell($XD,$YD,$V)" 
			outindev.display(msg)   	    
		  } 
		  fun diplayLed( V : Boolean){
		  	if( V ) Runtime.getRuntime().exec("python ledPython25On.py"); 
		  	else Runtime.getRuntime().exec("python ledPython25Off.py");
		  }
		
		  fun displayLedState(){
		  	displayOnGui();
		  	diplayLed( MyState );
		  }
		  
		  CommUtils.outyellow("STARTS-init")
		        
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 name = name+kotlin.random.Random.nextInt(0, 501); MyName=name  
						CommUtils.outblack("$name | INIT ")
						request("addtogame", "addtogame($MyName)" ,"gamemaster" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleAddedtogame",cond=whenReply("addedtogame"))
				}	 
				state("handleAddedtogame") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("addedtogame(CELLNAME,NROWS,NCOLS)"), Term.createTerm("addedtogame(CELLNAME,NROWS,NCOLS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val newname = payloadArg(0)
											   //===========================================================
											   //LA CELLA ASSUME IL NOME LOGICO ENTRO IL GIOCO 
											   //===========================================================
											   sysUtil.changeActorName( myself,newname ) 
											   conway.GridSupport25.RowsNum = payloadArg(1).toInt()
											   conway.GridSupport25.ColsNum = payloadArg(2).toInt()
								emitlocal("cellLifeName", "cellLifeName($MyName)" ) 
						}
						CommUtils.outblue("$name | STARTSSSSSSSSSSSSSS")
						 setCellCoords( )  
						CommUtils.outblue("$name | STARTS $X,$Y Countnb= $Countnb")
						 
									outindev = OutInCellGui(myself, "guiin") 
						forward("cellcreated", "cellcreated($MyName,false)" ,"gamemaster" ) 
						CommUtils.outblack("$name | published cellcreated to gamemaster  ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="handleAllcellready",cond=whenEvent("allcellready"))
					transition(edgeName="t02",targetState="changeCellState",cond=whenDispatch("changeCellState"))
				}	 
				state("handleAllcellready") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						  
									updateCellNameInContext(name)
								   Countnb = conway.GridSupport25.subscribeToNeighborsMqtt(myself, X,Y)
						CommUtils.outblue("$name | Countnb=$Countnb")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="changeCellState",cond=whenDispatch("changeCellState"))
					transition(edgeName="t04",targetState="exit",cond=whenEvent("exitCmd"))
					transition(edgeName="t05",targetState="emitinfophase",cond=whenEvent("startthegame"))
					transition(edgeName="t06",targetState="clearThecell",cond=whenEvent("clearCell"))
				}	 
				state("changeCellState") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("changeCellState(X,Y)"), Term.createTerm("changeCellState(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  X == payloadArg(0).toInt() && Y == payloadArg(1).toInt()  
								 ){  MyState = ! MyState;
													displayLedState()
								CommUtils.outyellow("$name | STATE=$MyState ")
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="clearThecell",cond=whenEvent("clearCell"))
					transition(edgeName="t08",targetState="exit",cond=whenEvent("exitCmd"))
					transition(edgeName="t09",targetState="changeCellState",cond=whenDispatch("changeCellState"))
					transition(edgeName="t010",targetState="emitinfophase",cond=whenEvent("startthegame"))
				}	 
				state("clearThecell") { //this:State
					action { //it:State
						CommUtils.outblack("$name | clearThecell ")
						 MyState = false     
						 displayLedState()   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="changeCellState",cond=whenDispatch("changeCellState"))
					transition(edgeName="t012",targetState="emitinfophase",cond=whenEvent("startthegame"))
					transition(edgeName="t013",targetState="clearThecell",cond=whenEvent("clearCell"))
					transition(edgeName="t014",targetState="stopthecell",cond=whenEvent("stopthecell"))
					transition(edgeName="t015",targetState="exit",cond=whenEvent("exitCmd"))
				}	 
				state("emitinfophase") { //this:State
					action { //it:State
						 var MyInfo = "$name,$MyState"  
						CommUtils.outgreen("$name | emitinfophase $name")
						 emitstreammqtt(name, "curstate","curstate($MyInfo)")  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="stopthecell",cond=whenEvent("stopthecell"))
					transition(edgeName="t017",targetState="exit",cond=whenEvent("exitCmd"))
					transition(edgeName="t018",targetState="elabinfophase",cond=whenEvent("curstate"))
				}	 
				state("elabinfophase") { //this:State
					action { //it:State
						 Countnbmsgs=Countnbmsgs+1  
						CommUtils.outgreen("$name | elabinfophase NmsgDaivicini=$Countnbmsgs")
						if( checkMsgContent( Term.createTerm("curstate(NB,STATE)"), Term.createTerm("curstate(NB,true)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Countnbon = Countnbon + 1   
						}
						if(  Countnbmsgs == Countnb  
						 ){forward("allnbreceived", "allnbreceived(ok)" ,name ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t019",targetState="stopthecell",cond=whenEvent("stopthecell"))
					transition(edgeName="t020",targetState="exit",cond=whenEvent("exitCmd"))
					transition(edgeName="t021",targetState="elabinfophase",cond=whenEvent("curstate"))
					transition(edgeName="t022",targetState="elabstatephase",cond=whenDispatch("allnbreceived"))
				}	 
				state("elabstatephase") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | elabstatephase $MyState $Countnbon")
						if(  MyState   
						 ){ MyState = Countnbon==2 || Countnbon==3  
						}
						else
						 {if(  ! MyState   
						  ){ MyState = (Countnbon==3)  
						 }
						 }
						 Countnbmsgs = 0
								   Countnbon   = 0 
						           displayLedState() 
						forward("cellready", "cellready($MyName)" ,"gamemaster" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t023",targetState="emitinfophase",cond=whenEvent("synch"))
					transition(edgeName="t024",targetState="stopthecell",cond=whenEvent("stopthecell"))
					transition(edgeName="t025",targetState="clearThecell",cond=whenEvent("clearCell"))
					transition(edgeName="t026",targetState="changeCellState",cond=whenDispatch("changeCellState"))
					transition(edgeName="t027",targetState="exit",cond=whenEvent("exitCmd"))
				}	 
				state("stopthecell") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | stopthecell ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t028",targetState="changeCellState",cond=whenDispatch("changeCellState"))
					transition(edgeName="t029",targetState="emitinfophase",cond=whenEvent("startthegame"))
					transition(edgeName="t030",targetState="clearThecell",cond=whenEvent("clearCell"))
					transition(edgeName="t031",targetState="exit",cond=whenEvent("exitCmd"))
				}	 
				state("exit") { //this:State
					action { //it:State
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 

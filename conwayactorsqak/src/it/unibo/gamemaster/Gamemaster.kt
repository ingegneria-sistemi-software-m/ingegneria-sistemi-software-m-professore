/* Generated by AN DISI Unibo */ 
package it.unibo.gamemaster

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Gamemaster ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
			var NAllCells  =  0   //set in rchestrateTheGame
			var NCellReady =  0
		  	
		 	var Stopped  = false
		 	var EpochNum = 0
		 	
		 	lateinit  var outtogui : main.java.OutForGui  
			
			var altLeastOneCellOn = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name | START !!!!!!!!!!!!! ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t020",targetState="orchestrateTheGame",cond=whenDispatch("activateMaster"))
				}	 
				state("orchestrateTheGame") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("activateMaster(NCELLS)"), Term.createTerm("activateMaster(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 NAllCells = payloadArg(0).toInt()  
						}
						CommUtils.outred("$name | orchestrateTheGame NAllCells=$NAllCells")
						 outtogui  = main.java.OutForGui( myself )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						 EpochNum = 0  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t021",targetState="startTheGame",cond=whenDispatch("start"))
				}	 
				state("startTheGame") { //this:State
					action { //it:State
						 Stopped = false  
						CommUtils.outmagenta("$name | emit event startthegame")
						emit("startthegame", "startthegame(ok)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t022",targetState="handleCellReady",cond=whenDispatch("cellready"))
				}	 
				state("ignoreCmd") { //this:State
					action { //it:State
						 val cmd = currentMsg.msgId()  
						CommUtils.outred("$cmd ignored")
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handleCellReady") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cellready(CELL,STATE)"), Term.createTerm("cellready(CELL,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(1)  == "true"  
								 ){ altLeastOneCellOn = true  
								}
						}
						 NCellReady++  
						if(  NCellReady == NAllCells  
						 ){delay(1000) 
						 NCellReady=0  
						 EpochNum++  
						forward("epochDone", "epochDone(EpochNum)" ,name ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t023",targetState="stopTheGame",cond=whenDispatch("stop"),interruptedStateTransitions)
					transition(edgeName="t024",targetState="handleCellReady",cond=whenDispatch("cellready"))
					transition(edgeName="t025",targetState="continueTheGame",cond=whenDispatchGuarded("epochDone",{ ! Stopped && altLeastOneCellOn  
					}))
					transition(edgeName="t026",targetState="epocDoneEmpty",cond=whenDispatchGuarded("epochDone",{ ! Stopped && ! altLeastOneCellOn  
					}))
					transition(edgeName="t027",targetState="epocDoneStopped",cond=whenDispatchGuarded("epochDone",{ Stopped  
					}))
				}	 
				state("epocDoneEmpty") { //this:State
					action { //it:State
						CommUtils.outred("$name | epoch $EpochNum  GRID EMPTY !!! ")
						 outtogui.display( "lfctrl: gridempty/$EpochNum" )  
						emit("stopthecell", "stopthecell(gridempty)" ) 
						updateResourceRep( "gridempty($EpochNum)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("epocDoneStopped") { //this:State
					action { //it:State
						CommUtils.outblack("$name | epocDoneStopped epoch $EpochNum  nonempty=$altLeastOneCellOn")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("continueTheGame") { //this:State
					action { //it:State
						CommUtils.outblack("$name | continueTheGame epoch $EpochNum nonempty=$altLeastOneCellOn")
						emit("synch", "synch(ok)" ) 
						 altLeastOneCellOn = false  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t028",targetState="handleCellReady",cond=whenDispatch("cellready"))
				}	 
				state("stopTheGame") { //this:State
					action { //it:State
						CommUtils.outred("$name | GAME STOPPED - interrupt")
						 Stopped = true  
						emit("stopthecell", "stopthecell(stopbutton)" ) 
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 

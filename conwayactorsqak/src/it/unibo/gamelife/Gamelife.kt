/* Generated by AN DISI Unibo */ 
package it.unibo.gamelife

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Gamelife ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		  	
		 	var NumOfCells     = 0
		 	var NCellReady     = 0
		 	var NumIter        = 0
		 	var stopped        = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name | STARTS")
						delegate("fromdisplay", "gamelifehelper") 
						delegate("cellends", "gamelifehelper") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="handlegameready",cond=whenDispatch("gameready"))
				}	 
				state("handlegameready") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("gameready(CELLNUM)"), Term.createTerm("gameready(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								    			NumOfCells = payloadArg(0).toInt() 
						}
						CommUtils.outmagenta("$name | game ready-to-start with $NumOfCells cells")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="handlecellready",cond=whenDispatch("cellready"))
				}	 
				state("handlecellready") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cellready(CELL)"), Term.createTerm("cellready(CELL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 NCellReady = NCellReady + 1   
								if(  NCellReady == NumOfCells  
								 ){CommUtils.outcyan("$name|handlecellready $NCellReady/$NumOfCells for  ${payloadArg(0)}")
								forward("allcellready", "allcellready(ok)" ,"gamelife" ) 
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="handlecellready",cond=whenDispatch("cellready"))
					transition(edgeName="t012",targetState="synchclock",cond=whenDispatch("allcellready"))
					transition(edgeName="t013",targetState="setstopgame",cond=whenDispatch("gamestopped"))
				}	 
				state("setstopgame") { //this:State
					action { //it:State
						CommUtils.outred("$name | game receives stop NCellReady=$NCellReady ----------- ")
						 stopped = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="handlecellready",cond=whenDispatch("cellready"))
				}	 
				state("synchclock") { //this:State
					action { //it:State
						if(  ! stopped  
						 ){ NumIter = NumIter + 1
							    	   val Dt = 10L          //MODIFIED for MQTT
						delay(Dt)
						emit("synch", "synch(ok)" ) 
						CommUtils.outred("$name | emitted synch $NumIter")
						 NCellReady = 0   
						}
						else
						 {forward("gamesuspend", "gamesuspend(oK)" ,"gamelife" ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t015",targetState="handlestopaftersynch",cond=whenDispatch("gamestopped"))
					transition(edgeName="t016",targetState="stopgame",cond=whenDispatch("gamesuspend"))
					transition(edgeName="t017",targetState="handlecellready",cond=whenDispatch("cellready"))
				}	 
				state("handlestopaftersynch") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | handlestopaftersynch *** ")
						 stopped = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="synchclock", cond=doswitch() )
				}	 
				state("stopgame") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | stopgame: the game ENDS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t018",targetState="resumegame",cond=whenDispatch("gameended"))
				}	 
				state("resumegame") { //this:State
					action { //it:State
						
							     	stopped    = false
							    	NCellReady = 0
							    	//Riattivazione da stop a start gi� fatta
						CommUtils.outgreen("$name | resumegame ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t019",targetState="handlecellready",cond=whenDispatch("cellready"))
				}	 
			}
		}
} 

/* Generated by AN DISI Unibo */ 
package it.unibo.player

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import unibo.basicomm23.mqtt.*

class Player ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=true ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		  
		 		var RowsN = -1
				var ColsN = -1
		 		var X  = 0
				var Y  = 0
				var XD = 0
				var YD = 0
				
		     fun setCellCoords( cellname : String )  {
		     	 //CommUtils.outred("setCellCoords $cellname")
			     val coords = cellname.replace("cell_","").split("_")
			     X = coords[0].toInt()
			     XD = X+1
			     Y  = coords[1].toInt()        
			     YD = Y+1
		  	}
		 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1000) 
						
						  		   val req = CommUtils.buildRequest(name,"addtogame","addtogame( $MyName )","gamebuilder")
						 		   publish(  req.toString(), "unibo/qak/gamebuilder" )
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleAddedtogame",cond=whenReply("addedtogame"))
				}	 
				state("handleAddedtogame") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("addedtogame(CELLNAME,NROWS,NCOLS)"), Term.createTerm("addedtogame(CELLNAME,NROWS,NCOLS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val CellName = payloadArg(0)
											   RowsN = payloadArg(1).toInt()
											   ColsN = payloadArg(2).toInt()
								 setCellCoords( CellName )  
								 val Cellname = createActorDynamically( "cell", "_${X}_$Y", false)  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 

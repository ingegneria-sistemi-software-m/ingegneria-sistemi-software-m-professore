/* Generated by AN DISI Unibo */ 
package it.unibo.mapbuilder

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.VrobotLLMoves24
import main.resources.map.RoomMap

class Mapbuilder ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		val vr = VrobotLLMoves24.create("localhost",myself)
		 var N  = 0 
			   var NR = 1
			   var NC = 1
			   var firstcolumn  = true
			   var firstrow     = false 
			   
			   val MapName      = "mapnaive"
			   
			   lateinit var map: RoomMap
			   
			   var CurR = 0
			   var CurC = 0
			   var CN   = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS $vr")
						 vr.halt();    
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doMap", cond=doswitch() )
				}	 
				state("doMap") { //this:State
					action { //it:State
						delay(200) 
						 var RSTEP = vr.step(350)  
						if(  RSTEP  
						 ){if(  firstcolumn  
						 ){ NR++  
						}
						if(  firstrow     
						 ){ NC++  
						}
						forward("stepdone", "stepdone(1)" ,name ) 
						}
						else
						 {forward("stepfailed", "stepfailed(1)" ,name ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="doMap",cond=whenDispatch("stepdone"))
					transition(edgeName="t01",targetState="turnAndgo",cond=whenDispatch("stepfailed"))
				}	 
				state("turnAndgo") { //this:State
					action { //it:State
						if(  ! firstcolumn  
						 ){ NR++  
						}
						if(  ! firstrow     
						 ){ NC++  
						}
						CommUtils.outcyan("$name | N=$N, NC=$NC, NR=$NR")
						if(  ! firstrow  
						 ){ firstrow = true  
						}
						 firstcolumn = false  
						 N = N + 1            
						 vr.turnLeft()        
						CommUtils.outcyan("$name | N=$N, NC=$NC, NR=$NR")
						if(  N == 2  
						 ){CommUtils.outyellow("$name | N=$N, NC=$NC, NR=$NR")
						 map = RoomMap(NR,NC)           
						 map.setRobot( NR-1,NC-1 )      
						 val MS  = map.toString()       
						 map.saveRoomMap(MapName, MS )  
						 val MP  = map.toProlog()       
						 map.saveRoomMapProlog("mapProlog", MP)  
						CommUtils.outyellow("$name | MAP: ")
						CommUtils.outblue("$MS ")
						delay(1000) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doMap", cond=doswitch() )
				}	 
			}
		}
} 

/* Generated by AN DISI Unibo */ 
package it.unibo.bwobserver

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Bwobserver ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name | READY")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="handleVrinfo",cond=whenEvent("vrinfo"))
					transition(edgeName="t013",targetState="handleSonardata",cond=whenEvent("sonardata"))
					transition(edgeName="t014",targetState="handleObstacle",cond=whenEvent("obstacle"))
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						forward("stop", "stop(1)" ,"bw24core" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_handleObstacle", 
				 	 					  scope, context!!, "local_tout_"+name+"_handleObstacle", 2000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t015",targetState="s0",cond=whenTimeout("local_tout_"+name+"_handleObstacle"))   
					transition(edgeName="t016",targetState="ignoreObstacle",cond=whenEvent("obstacle"))
				}	 
				state("ignoreObstacle") { //this:State
					action { //it:State
						CommUtils.outcyan("$name | ignore obstacle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_ignoreObstacle", 
				 	 					  scope, context!!, "local_tout_"+name+"_ignoreObstacle", 2000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t017",targetState="s0",cond=whenTimeout("local_tout_"+name+"_ignoreObstacle"))   
					transition(edgeName="t018",targetState="ignoreObstacle",cond=whenEvent("obstacle"))
				}	 
				state("handleVrinfo") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t019",targetState="handleVrinfo",cond=whenEvent("vrinfo"))
					transition(edgeName="t020",targetState="handleSonardata",cond=whenEvent("sonardata"))
					transition(edgeName="t021",targetState="handleObstacle",cond=whenEvent("obstacle"))
				}	 
				state("handleSonardata") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t022",targetState="handleVrinfo",cond=whenEvent("vrinfo"))
					transition(edgeName="t023",targetState="handleSonardata",cond=whenEvent("sonardata"))
					transition(edgeName="t024",targetState="handleObstacle",cond=whenEvent("obstacle"))
				}	 
			}
		}
} 

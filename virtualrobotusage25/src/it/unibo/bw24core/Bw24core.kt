/* Generated by AN DISI Unibo */ 
package it.unibo.bw24core

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Bw24core ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 var N=0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1500) 
						CommUtils.outblue("$name STARTS")
						observeResource("127.0.0.1","8125","ctxvrqak","vrqak","vrinfo")
						forward("move", "move(h)" ,"vrqak" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doboundary", cond=doswitch() )
				}	 
				state("doboundary") { //this:State
					action { //it:State
						delay(200) 
						request("step", "step(350)" ,"vrqak" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleVrinfo",cond=whenDispatch("vrinfo"))
					transition(edgeName="t01",targetState="doboundary",cond=whenReply("stepdone"))
					transition(edgeName="t02",targetState="turnAndgo",cond=whenReply("stepfailed"))
					transition(edgeName="t03",targetState="handleStop",cond=whenDispatch("stop"))
				}	 
				state("turnAndgo") { //this:State
					action { //it:State
						 N = N + 1  
						forward("move", "move(l)" ,"vrqak" ) 
						if(  N == 4  
						 ){delay(300) 
						 System.exit(0)  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doboundary", cond=doswitch() )
				}	 
				state("handleVrinfo") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("vrinfo(S,INFO)"), Term.createTerm("vrinfo(S,INFO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val source =payloadArg(0); val info = payloadArg(1)  
								CommUtils.outyellow("$name | handlevrinfo $info")
								if(  info.contains("sonardata")  
								 ){CommUtils.outmagenta("$name | handlevrinfo $info")
								delay(2000) 
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleVrinfo",cond=whenDispatch("vrinfo"))
					transition(edgeName="t05",targetState="doboundary",cond=whenReply("stepdone"))
					transition(edgeName="t06",targetState="turnAndgo",cond=whenReply("stepfailed"))
					transition(edgeName="t07",targetState="handleStop",cond=whenDispatch("stop"))
				}	 
				state("handleStop") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="handleVrinfo",cond=whenDispatch("vrinfo"))
					transition(edgeName="t09",targetState="doboundary",cond=whenReply("stepdone"))
					transition(edgeName="t010",targetState="turnAndgo",cond=whenReply("stepfailed"))
					transition(edgeName="t011",targetState="handleStop",cond=whenDispatch("stop"))
				}	 
			}
		}
} 

System virtualrobotusage25
/*
 * vrusage25A.qak
 */

/*
 * Accede al virtual robot usando mosse di basso livello 
 * + step sincrono del POJO VrobotLLMoves24
 * 
 * Percorre il boundary della stanza (SUPPOSTO PRIVO DI OSTACOLI)
 * e si ferma per 2 secs quando rilevato dal SONAR
 */
  
Dispatch stepdone   : stepdone(X)        "step ok"
Dispatch stepfailed : stepfailed(X)      "step ko"
Event  sonardata    : sonar( DISTANCE )  "emesso dal SONAR"	   
Event vrinfo        : vrinfo(A,B)
Dispatch vrinfo     : vrinfo(A,B)
 
Context ctxvrusage25  ip [host="localhost"  port=8120   ]

 QActor vrboundary context ctxvrusage25 withobj vr using "VrobotLLMoves24.create(\"localhost\",myself)" {
 	import "main.java.*"
 	[# var RSTEP = false; var N=0 #] 
	State s0 initial{ 
		println("$name STARTS") color blue 
		//[# vr.setTrace( true ) #]
		[# vr.halt() #]  //per sbloccare eventuali notallowed
	}
	Goto doboundary
	 
	State doboundary{
		delay 200
 		[# RSTEP = vr.step(350) #]  
 		//se RSTEP = false emette vrinfo(obstacle,unknown) percepito da vrobserver
		//println("$name | RSTEP=$RSTEP") color blue
		if [# RSTEP #]{ autodispatch stepdone : stepdone(1) }	 
		else{ autodispatch stepfailed : stepfailed(1) }
	} 
	Transition t0 
	    whenEvent sonardata -> handleSonardata
	    whenMsg stepdone    -> doboundary
	    whenMsg stepfailed  -> turnAndgo
 
	    
	State turnAndgo{
		[# N = N + 1 #]
 		[# vr.turnLeft() #]
		if [# N == 4 #]{
			[# System.exit(0) #]
		}  
	}
	Goto doboundary
	    
	/*
	 * in questo stato c'Ã¨ un dispatch stepdone/stepfailed  in coda 
	 */
	State handleSonardata{
		printCurrentMessage color magenta
		delay 200
		[# vr.step(350) #]     //mi sposto da sotto il sonar se no vengono RIGENERATI eventi
		delay 2000  //pause
	} 
	Transition t0 
 	    whenMsg stepdone    -> doboundary       //quello in sospeso
	    whenMsg stepfailed  -> turnAndgo

}

 
QActor vrobserver context ctxvrusage25{
	State s0 initial{ 
		println("$name | READY") color blue
	}
	Goto work
	
	State work{
		
	}
	Transition t0
		whenEvent vrinfo    -> handleVrinfo
		whenEvent sonardata -> handleSonardata
	
	State handleVrinfo{ 
		printCurrentMessage color magenta
	}	
 	Goto work   
 
	State handleSonardata{
		printCurrentMessage color blue
	}	
 	Goto work
 }
 

 
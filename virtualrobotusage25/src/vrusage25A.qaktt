System virtualrobotusage25
/*
 * vrusage25A.qak
 */

/*
 * Accede al virtual robot usando mosse di basso livello 
 * + step sincrono del POJO VrobotLLMoves24
 * 
 * Percorre il boundary della stanza (SUPPOSTO PRIVO DI OSTACOLI)
 * e si ferma per 2 secs quando rilevato dal SONAR
 * 
 * Da conforntare con BoundaryWalkNaiveUsingWs
 */ 
   
Dispatch stepdone   : stepdone(X)        "step ok"
Dispatch stepfailed : stepfailed(X)      "step ko"
Event  sonardata    : sonar( DISTANCE )  "emesso dal SONAR"	   
Dispatch vrinfo     : vrinfo(A,B)        "inviato dal supportp"

Event vrinfo        : vrinfo(A,B)        "emesso dal supportp"
Event obstacle      : obstacle(X)		 "emesso dal supportp"
 
Context ctxvrusage25  ip [host="localhost"  port=8120   ]

 QActor vrboundary context ctxvrusage25 withobj vr using "VrobotLLMoves24.create(\"localhost\",myself)" {
 	import "main.java.*"
 	[# var RSTEP = false; var N=0; var Bottom=true #] 
 	
 
 	
	State s0 initial{ 
		println("$name STARTS") color blue 
		//[# vr.setTrace( true ) #]
		[# vr.halt() #]  //per sbloccare eventuali notallowed
	}
	Goto doboundary
	 
	State doboundary{
		delay 200
 		[# RSTEP = vr.step(350) #]  
 		//se RSTEP = false emette vrinfo(obstacle,unknown) percepito da vrobserver
		//println("$name | RSTEP=$RSTEP") color blue
		if [# RSTEP #]{ autodispatch stepdone : stepdone(1) }	 
		else{ autodispatch stepfailed : stepfailed(1) }
	} 
	Transition t0 
	    whenEvent sonardata -> handleSonardata
	    whenMsg stepdone    -> doboundary
	    whenMsg stepfailed  -> turnAndgo
 
	    
	State turnAndgo{
		[# N = N + 1 #]
 		[# vr.turnLeft() #]
		if [# N == 4 #]{
			[# System.exit(0) #]
		}  
	}
	Goto doboundary
	    
	/*
	 * in questo stato c'Ã¨ un dispatch stepdone/stepfailed  in coda 
	 */
	State handleSonardata{
		println("$name |  handleSonardata ")
		   [# vr.halt()       #]
	 	   [# vr.forward(350) #]	  		
		   println("$name |  PAUSE with autodispatch")
		   delay 2000  //pause
	} 
	Transition t0 
 	    whenMsg stepdone    -> doboundary       //quello in sospeso
	    whenMsg stepfailed  -> turnAndgo

}
 

QActor vrobserver context ctxvrusage25{
	State s0 initial{ 
		println("		$name | READY") color blue
	}
	Goto work
	
	State work{
		
	}
	Transition t0
		whenEvent vrinfo    -> handleVrinfo
		whenEvent obstacle   -> handleobstacle
		whenEvent sonardata -> handleSonardata
	
	State handleVrinfo{   
		println("		$name | $currentMsg") color green
	}	
 	Goto work   

	State handleobstacle{ 
		println("		$name | $currentMsg")  color magenta
	}	
 	Goto work  
 	 
	State handleSonardata{
		println("		$name | $currentMsg")  color black
	}	
 	Goto work
 }
 

 
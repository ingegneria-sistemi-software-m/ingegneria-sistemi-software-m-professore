System virtualrobotusage25
/*
 * vrusage25A.qak
 */

/*
 * Accede al virtual robot usando mosse di basso livello 
 * + step asincrono del POJO VrobotHLMoves24
 * 
 * Percorre il boundary della stanza (SUPPOSTO PRIVO DI OSTACOLI)
 * e si ferma per 2 secs quando rilevato dal SONAR
 * 
 * Da conforntare con vrusage25A
 */
  
 

Request step       : step(TIME)   
Reply stepdone     : stepdone(V)                 for step
Reply stepfailed   : stepfailed(DURATION, CAUSE) for step

Event  sonardata    : sonar( DISTANCE )  "emesso dal SONAR"	   
Dispatch vrinfo     : vrinfo(A,B)        "inviato dal supportp"

Event vrinfo        : vrinfo(A,B)        "emesso dal supportp"
Event obstacle      : obstacle(X)		 "emesso dal supportp"
 
Context ctxvrusage25  ip [host="localhost"  port=8120   ]

 QActor vrboundary context ctxvrusage25 withobj vr using "VrobotHLMoves24.create(\"localhost\",myself)" {
 	import "main.java.*"
 	
 	[#  var N=0; 
 		var StepCount = 0
 	#] 
	State s0 initial{ 
		println("$name STARTS") color blue 
		//[# vr.setTrace( true ) #]
		[# vr.halt() #]  //per sbloccare eventuali notallowed
	}
	Goto doboundary
	 
	State doboundary{
		delay 200
		[# StepCount++ #]
		//STEP ASINCRONO => non più autodispatch: il supporto invia una reply
		println("stepAsynch $StepCount") color blue
 		[#  vr.stepAsynch(370) #]  
	} 
	Transition t0 
	    whenEvent sonardata   -> handleSonardata
	    whenReply stepdone    -> doboundary
	    whenReply stepfailed  -> turnAndgo
 
	    
	State turnAndgo{
		[# N = N + 1 #]
		println("turn N=$N") color blue
 		[# vr.turnLeft() #] //oppure [# vr.move("l") #]
		if [# N == 4 #]{
			[# System.exit(0) #]
		}  
	}
	Goto doboundary
	    
	/*
	 * in questo stato c'è un dispatch stepdone/stepfailed  in coda 
	 */
	State handleSonardata{
		printCurrentMessage color cyan
		delay 200
		[#  vr.stepAsynch(370) #]     //mi sposto da sotto il sonar se no vengono RIGENERATI eventi
		delay 2000  //pause
	} 
	Transition t0 
 	    whenReply stepdone    -> doboundary       //quello in sospeso
	    whenReply stepfailed  -> turnAndgo

}

 
QActor vrobserver context ctxvrusage25{
	State s0 initial{ 
		println("$name | READY") color blue
	}
	Goto work
	
	State work{
		
	}
	Transition t0
		whenEvent vrinfo    -> handleVrinfo
		whenEvent obstacle   -> handleobstacle
		whenEvent sonardata -> handleSonardata
	
	State handleVrinfo{   
		printCurrentMessage color green
	}	
 	Goto work   

	State handleobstacle{ 
		printCurrentMessage color magenta
	}	
 	Goto work  
 	 
	State handleSonardata{
		printCurrentMessage color black
	}	
 	Goto work
 }
 

 
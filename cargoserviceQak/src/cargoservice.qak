System  cargoservice  
mqttBroker "localhost" : 1883 eventTopic "cargoevents"     //mosquitto se in docker
//mqttBroker "test.mosquitto.org" : 1883 eventTopic "cargoevents"   //mosquitto "localhost" : 1883
//mqttBroker "broker.hivemq.com" : 1883
            
Request createProduct : product(String)                     //String JSON '{"productId":31,"name":"p31","weight":311}'
Reply   createdProduct: productid(ID) for createProduct   //String JSON
    
Request deleteProduct  : product( ID ) 
Reply   deletedProduct : product(String) for deleteProduct

Request getProduct : product( ID ) 
Reply   getProductAnswer: product( JSonString ) for getProduct 
 
Request getAllProducts : dummy( ID )
Reply   getAllProductsAnswer: products(  String ) for getAllProducts 
 
 
//See QakActors24Demo.html?highlight=publish#demomqttexplicit-qak
Dispatch cargoinfo : cargoinfo( INFO )
Event   cargoevent : cargoevent( INFO )
Event   alarm      : alarm(X) //for basicrobot
 
Context ctxcargoservice ip [ host="localhost" port=8111]
 
/*
 * QActor che esegue la richiesta create in modo atomico e FIFO
 * Viene dichiarato per primo in quanto productservice lo delega
 */ 
QActor exec_createdelete context ctxcargoservice    
                   withobj psl using "ProductServiceLogic.getSingleton()"{
import "main.java.domain.*"  
[#  
	val logger = LoggerFactory.getLogger("createexecutor_actor")  
#] 
  State s0 initial{
    println("$name | STARTSSS") color green
    //connectToMqttBroker "tcp://localhost:1883" 
  }
  Transition t0 
  	whenRequest createProduct -> handle_createProduct
  	whenRequest deleteProduct -> handle_deleteProduct
  	   
  	State handle_createProduct{
		printCurrentMessage color cyan
		//[# logger.info(  sysUtil.logStr(name,"handling $currentMsg","categ0")  ) #]
		
		publish "cargoinfo" -m cargoevent : cargoevent(prova)
		 
		//emit cargoevent : cargoevent(prova1)
		
		[# var ANSWR  = "todo" ; var PID = 0 #] 
		//Elaborazione del messaggio ricevuto
		onMsg( createProduct : product(JSONSTR) ){
			[#  val JSTR=payloadArg(0).replace("'",""); 
			    
			#]
			println( "$name |  handle_createProduct ${JSTR} ") color blue
			
			[#  
		
			   	    val product = Product(JSTR)		 	   	    
					val PNEW  = psl.createProduct( product  )             //product con id=0 => negative value				 
		   	   		ANSWR     = sysUtil.toPrologStr(PNEW.toString())       //"'"+PNEW+"'"  //JSON TROPPE CONVERSIONI !!!		   	   
		   	        PID       = PNEW.getProductId()
		   	        CommUtils.outgreen("handle_createProduct PID=$PID ")

			 #]

            println("createdProduct : productid($PID)"  ) color magenta
		    replyTo createProduct with createdProduct : productid($PID)	
		}
	}
	Transition t0 
	  	whenRequest createProduct -> handle_createProduct
	  	whenRequest deleteProduct -> handle_deleteProduct

  	State handle_deleteProduct{
		printCurrentMessage color cyan
		[# logger.info(  sysUtil.logStr(name,"handling $currentMsg","categ0")  ) #]
		
		//publish "cargoinfo" -m cargoevent : cargoevent(prova)
		
		emit cargoevent : cargoevent(eventdelete)
		
		[# var ANSWR  = "todo" ; var PID = 0 #] 
		//Elaborazione del messaggio ricevuto
		onMsg( deleteProduct : product(PID ) ){
			[#  PID=payloadArg(0).toInt()                    	    
			#]
			println( "$name |  handle_deleteProduct ${PID} ") color blue
			
			[# 					   	     	 	   	    
					val ANSWR  = psl.deleteProduct( PID  )             //product con id=0 => negative value				 		   	         
		   	        CommUtils.outgreen("handle_deleteProduct ANSWR=$ANSWR ")
			 #]

 		    replyTo deleteProduct with deletedProduct : product($ANSWR)	
		}
	}
	Transition t0 
	  	whenRequest createProduct -> handle_createProduct
	  	whenRequest deleteProduct -> handle_deleteProduct

}//Qactor exec_createdelete 

/*
 * QActor che delega le richieste createProduct 
 * e crea esecuotir per le richieste getProduct
 
 * Per un caller vedi main.java.caller.ProductServiceCallerTcp
 */
QActor productservice context ctxcargoservice   
                      { //withobj psl using "ProductServiceLogic()"
import "main.java.domain.*" 
     
[#  
	val logger = LoggerFactory.getLogger("productservice_actor")  
	clearlog("./logs/app_cargoservice.log") 



//REGISTER	 
fun register(){
// 	  System.setProperty("eureka.client.props", "main/java/eureka-client.properties");
// 	  System.setProperty("eureka.leaseRenewalIntervalInSeconds", "60");
// 	  System.setProperty("eureka.instance.nonSecurePort", "8111");
//	  CommUtils.outgreen("props:"+ System.getProperty("eureka.client.props"));
//	  CommUtils.outgreen("port :"+ System.getProperty("eureka.instance.nonSecurePort"));
//	  CommUtils.outgreen("dt   :"+ System.getProperty("eureka.leaseRenewalIntervalInSeconds"));
    val eurekaOn = CommUtils.getEnvvarValue("EUREKA_CLIENT_SERVICEURL_DEFAULTZONE")
    val myIp     = CommUtils.getMyPublicip()
    CommUtils.outblue("eurekaOn=$eurekaOn myIp=$myIp ")
//	  if( eurekaOn != null) 
	val discoveryclient = main.java.EurekaServiceConfig.myRegister( main.java.EurekaServiceConfig() )
	//val discoveryclient = CommUtils.registerService( main.java.EurekaServiceConfig() )
	CommUtils.outblue("discoveryclient=$discoveryclient ")
	//discoveryclient=com.netflix.discovery.DiscoveryClient@6def0632
}
#]  
  
	State s0 initial{ 
		[# val Info = "$name | STARTS delegating createProduct to exec_createdelete" #]
		
		//connectToMqttBroker "tcp://localhost:1883"
		
        delay 1500 //Give time to other actors to srart before delegate //TODO:wait ...
        [#   
        	logger.info(  sysUtil.logStr(name,Info,"categ0")  )
        	register()
        #]
        println("$name | STARTSSSSSSSSSSSSSSSSSSSSS") color green
		delegate createProduct to exec_createdelete
		delegate deleteProduct to exec_createdelete
		println( Info ) color blue
	} 
	Transition t0 
		whenRequest getProduct     -> handle_getProduct
		whenRequest getAllProducts -> handle_getAllProducts
	
	State handle_getProduct{
		printCurrentMessage color cyan
		delegateCurrentMsgTo exec_get
	}	
	Transition t0 
		whenRequest getProduct    -> handle_getProduct
		whenRequest getAllProducts -> handle_getAllProducts

	State handle_getAllProducts{
		printCurrentMessage color cyan
		delegateCurrentMsgTo exec_getall
	}	
	Transition t0 
		whenRequest getProduct    -> handle_getProduct
		whenRequest getAllProducts -> handle_getAllProducts
 
}//QActor productservice
 

/*
 * QActor che esegue la richiesta get in mode parallelo ad altre get
 */
QActor exec_get context ctxcargoservice  
                        withobj psl using "ProductServiceLogic.getSingleton()" dynamicOnly { 
import "main.java.domain.*" 
[#   
	val logger = LoggerFactory.getLogger("exec_get_actor")  
#] 
/*
 * Ad ogni creazione si connette a MQTT
 */
  State s0 initial{ 
    println("$name | STARTS") color green
  }
 Transition t0 whenRequest  getProduct -> handle_getProduct

   State handle_getProduct{ 
   	printCurrentMessage color green
   	[# var ANSWR = "unknown" #]
		onMsg( getProduct : product( ID ) ){
			[# val PID  = payloadArg(0)  
			   val Info = "$name | handle_getProduct ID=${PID}"
			   logger.info( sysUtil.logStr(name,Info,"categ0") )
			   CommUtils.outblue(Info)
			   val PNEW = psl.getProduct(  PID  ) //return Product
			   ANSWR = sysUtil.toPrologStr( PNEW.toString() )  //"'"+PNEW+"'"  //JSON
			   logger.info(  sysUtil.logStr(name,"ANSWR=$ANSWR","categ1")  )
			#] 
			//println( Info  ) color blue
 			println( "$name | handle_getProduct ANSWR=$ANSWR  ") color green 
 
		    replyTo getProduct with getProductAnswer : product($ANSWR)			
		}
		println("$name | ENDS") color green
		terminate 0
  } 

}//Qactor exec_get

QActor exec_getall context ctxcargoservice  
                        withobj psl using "ProductServiceLogic.getSingleton()" dynamicOnly {
import "main.java.domain.*" 
	  State s0 initial{ 
	    println("$name | STARTS") color green
	  }
 	Transition t0 whenRequest  getAllProducts -> handle_getAll
                        	
  State  handle_getAll{
   	printCurrentMessage color green
   	[# var ASNWR = "unknown" #]
		onMsg( getAllProducts : dummy( ID ) ){
			[#  
			   val ALLPRODS = psl.getAllProducts()           //return List<String>
			   if( ALLPRODS != null  ) ASNWR = ALLPRODS.toString() //"'"+ALLPRODS.toString()+"'"
			   else ASNWR = "empty"
			#] 
			//println( Info  ) color blue
 			println( "$name | handle_getAll ALLPRODS=$ALLPRODS  ") color green 
 
		    replyTo getAllProducts with getAllProductsAnswer : products($ASNWR)			
		}
		println("$name | ENDS") color green
  	    terminate 0 
  }                     	
}//Qactor exec_getall


/*
 * ------------------------------------------
 * ------------------------------------------
 */ 
 QActor servicefacade context ctxcargoservice{
 	[# var productToCreate = ""#]
  State s0 initial{ 
    println("$name | READY") color black
  }
  Transition t0 
		whenRequest createProduct  -> do_createProduct
		whenRequest getProduct     -> do_getProduct
		whenRequest deleteProduct  -> do_deleteProduct
		whenRequest getAllProducts -> do_getAllProducts
 
 
   State do_createProduct{
  	printCurrentMessage color black
  	onMsg( createProduct : product(P) ) {
  		[# val P = sysUtil.toPrologStr( payloadArg(0), true) #]
  		println("$MyName | do_createProduct $P") color green
  		[# productToCreate = P #]
  		request productservice -m createProduct : product($P)
  	}  	
  }
  Transition t0
  	whenReply createdProduct -> showCreatedProduct
 

 
  State showCreatedProduct{
  	printCurrentMessage color black
	  	[#  val reply = sysUtil.toPrologStr( productToCreate, false )
	  		CommUtils.outgreen( "$MyName | $reply" )
	  		setCLRAnswer( reply )
	  	    waitCLRAnswer("none")
	  	#]
  }
  Goto s0 
 
  
  State do_getProduct{
  	printCurrentMessage color black
  	onMsg( getProduct : product(ID) ) {
  		[# val PID = payloadArg(0) #]
  		request productservice -m getProduct : product($PID)
  	}  	
  }
  Transition t0
  	whenReply getProductAnswer -> showCRequestAnswer  
  
  State do_deleteProduct{
  	printCurrentMessage color black
  	onMsg( deleteProduct : product(PID) ) {
   		[# val PID = payloadArg(0)  #]
  		request productservice -m deleteProduct : product($PID) 		
  	}
  } 
  Transition t0
  	whenReply deletedProduct -> showCRequestAnswer  
  
  State do_getAllProducts{
  	printCurrentMessage color black
  	onMsg( getAllProducts : dummy(S) ) {
  		[# val D = payloadArg(0)  #]
  		request productservice -m getAllProducts : dummy($D)
  	}  	  	
  }
   Transition t0
  	whenReply getAllProductsAnswer -> showCRequestAnswer //showGetAllProductsAnswer


  State showCRequestAnswer{
  	printCurrentMessage color black
	  	[#  
	  		CommUtils.outblack("$name - $currentMsg")
	  		setCLRAnswer( currentMsg.toString() )
	  	//Attende che  currentanswer sia di nuovo none
	  	    waitCLRAnswer("none")
	  	#]
  }
  Goto s0  


 
//  State showGetAllProductsAnswer{
//  	printCurrentMessage color black
//  	//Setto la mia currentLocalRequestAnswer
//  	onMsg( getAllProductsAnswer : products(ID) ) {
//	  	[#  
//	  		CommUtils.outblack("$name - $currentMsg")
//	  		setCLRAnswer( currentMsg.toString() )
//	  	//Attende che  currentanswer sia di nuovo none
//	  	    waitCLRAnswer("none")
//	  	#]
//  	}
//  }
//  Goto s0 	
 }
                        
/* 
QActor mqttreceiver context ctxcargoservice  {
  State s0 initial{ 
    println("$name | STARTS") color black
    //connectToMqttBroker "tcp://localhost:1883"
    delay 2000
    subscribe "cargoinfo"
  }
  Transition t0 
  	whenEvent cargoevent -> handleCargoEvent
  	
  State handleCargoEvent{
  	printCurrentMessage color black
  }
  Transition t0 
  	whenEvent cargoevent -> handleCargoEvent
   	
	
}
 
*/
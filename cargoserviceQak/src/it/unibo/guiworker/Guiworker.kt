/* Generated by AN DISI Unibo */ 
package it.unibo.guiworker

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Guiworker ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 var productToCreate = "" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name | READY")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="do_createProduct",cond=whenRequest("createProduct"))
					transition(edgeName="t015",targetState="do_getProduct",cond=whenRequest("getProduct"))
					transition(edgeName="t016",targetState="do_deleteProduct",cond=whenRequest("deleteProduct"))
					transition(edgeName="t017",targetState="do_getAllProducts",cond=whenRequest("getAllProducts"))
				}	 
				state("do_createProduct") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("product(String)"), Term.createTerm("product(P)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val P = sysUtil.toPrologStr( payloadArg(0), true)  
								CommUtils.outgreen("$MyName | do_createProduct $P")
								 productToCreate = P  
								request("createProduct", "product($P)" ,"productservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t018",targetState="showCreatedProduct",cond=whenReply("createdProduct"))
				}	 
				state("showCreatedProduct") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						  val reply = sysUtil.toPrologStr( productToCreate, false )
							  		CommUtils.outgreen( "$MyName | $reply" )
							  		setCLRAnswer( reply )
							  	    waitCLRAnswer("none")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("do_getProduct") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("product(ID)"), Term.createTerm("product(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val PID = payloadArg(0)  
								request("getProduct", "product($PID)" ,"productservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t019",targetState="showCRequestAnswer",cond=whenReply("getProductAnswer"))
				}	 
				state("do_deleteProduct") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("product(ID)"), Term.createTerm("product(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val PID = payloadArg(0)   
								request("deleteProduct", "product($PID)" ,"productservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t020",targetState="showCRequestAnswer",cond=whenReply("deletedProduct"))
				}	 
				state("do_getAllProducts") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("dummy(ID)"), Term.createTerm("dummy(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val D = payloadArg(0)   
								request("getAllProducts", "dummy($D)" ,"productservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t021",targetState="showCRequestAnswer",cond=whenReply("getAllProductsAnswer"))
				}	 
				state("showCRequestAnswer") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						  
							  		CommUtils.outblack("$name - $currentMsg")
							  		setCLRAnswer( currentMsg.toString() )
							  	//Attende che  currentanswer sia di nuovo none
							  	    waitCLRAnswer("none")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
} 

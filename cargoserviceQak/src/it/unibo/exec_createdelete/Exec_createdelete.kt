/* Generated by AN DISI Unibo */ 
package it.unibo.exec_createdelete

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.domain.*

class Exec_createdelete ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		val psl = ProductServiceLogic.getSingleton()
		  
			val logger = LoggerFactory.getLogger("createexecutor_actor")  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | STARTSSS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handle_createProduct",cond=whenRequest("createProduct"))
					transition(edgeName="t01",targetState="handle_deleteProduct",cond=whenRequest("deleteProduct"))
				}	 
				state("handle_createProduct") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//val m = MsgUtil.buildEvent(name, "cargoevent", "cargoevent(prova)" ) 
						publish(MsgUtil.buildEvent(name,"cargoevent","cargoevent(prova)").toString(), "cargoinfo" )   
						 var ANSWR  = "todo" ; var PID = 0  
						if( checkMsgContent( Term.createTerm("product(String)"), Term.createTerm("product(JSONSTR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val JSTR=payloadArg(0).replace("'",""); 
											    
								CommUtils.outblue("$name |  handle_createProduct ${JSTR} ")
								  
										
											   	    val product = Product(JSTR)		 	   	    
													val PNEW  = psl.createProduct( product  )             //product con id=0 => negative value				 
										   	   		ANSWR     = sysUtil.toPrologStr(PNEW.toString())       //"'"+PNEW+"'"  //JSON TROPPE CONVERSIONI !!!		   	   
										   	        PID       = PNEW.getProductId()
										   	        CommUtils.outgreen("handle_createProduct PID=$PID ")
								
								CommUtils.outmagenta("createdProduct : productid($PID)")
								answer("createProduct", "createdProduct", "productid($PID)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handle_createProduct",cond=whenRequest("createProduct"))
					transition(edgeName="t03",targetState="handle_deleteProduct",cond=whenRequest("deleteProduct"))
				}	 
				state("handle_deleteProduct") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 logger.info(  sysUtil.logStr(name,"handling $currentMsg","categ0")  )  
						emit("cargoevent", "cargoevent(eventdelete)" ) 
						 var ANSWR  = "todo" ; var PID = 0  
						if( checkMsgContent( Term.createTerm("product(ID)"), Term.createTerm("product(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  PID=payloadArg(0).toInt()                    	    
								CommUtils.outblue("$name |  handle_deleteProduct ${PID} ")
								 					   	     	 	   	    
													val ANSWR  = psl.deleteProduct( PID  )             //product con id=0 => negative value				 		   	         
										   	        CommUtils.outgreen("handle_deleteProduct ANSWR=$ANSWR ")
								answer("deleteProduct", "deletedProduct", "product($ANSWR)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handle_createProduct",cond=whenRequest("createProduct"))
					transition(edgeName="t05",targetState="handle_deleteProduct",cond=whenRequest("deleteProduct"))
				}	 
			}
		}
} 

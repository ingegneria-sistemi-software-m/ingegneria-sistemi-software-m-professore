/* Generated by AN DISI Unibo */ 
package it.unibo.exec_get

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.domain.*

class Exec_get ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=true ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		val psl = ProductServiceLogic.getSingleton()
		   
			val logger = LoggerFactory.getLogger("exec_get_actor")  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="handle_getProduct",cond=whenRequest("getProduct"))
				}	 
				state("handle_getProduct") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 var ANSWR = "unknown"  
						if( checkMsgContent( Term.createTerm("product(ID)"), Term.createTerm("product(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val PID  = payloadArg(0)  
											   val Info = "$name | handle_getProduct ID=${PID}"
											   logger.info( sysUtil.logStr(name,Info,"categ0") )
											   CommUtils.outblue(Info)
											   val PNEW = psl.getProduct(  PID  ) //return Product
											   ANSWR = sysUtil.toPrologStr( PNEW.toString() )  //"'"+PNEW+"'"  //JSON
											   logger.info(  sysUtil.logStr(name,"ANSWR=$ANSWR","categ1")  )
								CommUtils.outgreen("$name | handle_getProduct ANSWR=$ANSWR  ")
								answer("getProduct", "getProductAnswer", "product($ANSWR)"   )  
						}
						CommUtils.outgreen("$name | ENDS")
						//terminate(0)
						context!!.removeInternalActor(myself)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 

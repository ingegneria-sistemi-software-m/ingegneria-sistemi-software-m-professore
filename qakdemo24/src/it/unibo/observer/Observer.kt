/* Generated by AN DISI Unibo */ 
package it.unibo.observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1000) 
						observeResource("localhost","8004","ctxobs","worker","info")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleinfo",cond=whenDispatch("info"))
				}	 
				state("handleinfo") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outblue("$currentMsg")
						
						     CommUtils.outblue( currentMsg.toString() )
						     CommUtils.outblue( "$currentMsg" )
						     CommUtils.outblue( currentMsg.msgContent().toString() )
						     CommUtils.outblue( "${currentMsg.msgContent()}" )
						if( checkMsgContent( Term.createTerm("info(SOURCE,TERM)"), Term.createTerm("info(SOURCE,TERM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Source = payloadArg(0)
								        val infoMsg = payloadArg(1)
								        val M      = "$infoMsg from $Source"
								CommUtils.outmagenta("$M")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="handleinfo",cond=whenDispatch("info"))
				}	 
			}
		}
} 

package demomqtt.usingInteraction;



import demomqtt.usingConnBase.blocking.MqttConnectionBaseSynch;
import demomqtt.usingInteractionBase.MqttInteractionBase;
import unibo.basicomm23.interfaces.IApplMessage;
import unibo.basicomm23.interfaces.Interaction2023;
import unibo.basicomm23.msg.ApplMessage;
import unibo.basicomm23.utils.CommUtils;

/*

 * 
 * LEVEL 
 */
public class MqttInteraction extends MqttInteractionBase implements Interaction2023{

	private String answerTopicName;
	
	public MqttInteraction(String mqttBrokerAddr, String clientid, String topic) {
		super(mqttBrokerAddr, clientid, topic);
	}

	@Override
	public void forward(IApplMessage msg) throws Exception {
		super.forward(msg.toString());
		
	}

	@Override
	public IApplMessage request(IApplMessage requestMsg) throws Exception {
		requestNum++;
		String sender   = requestMsg.msgSender();
		String reqid    = requestMsg.msgId();
		String receiver = requestMsg.msgReceiver();
		answerTopicName = "answ_"+reqid+"_"+sender;
		CommUtils.outcyan("MqttInteraction | request answerTopicName="+answerTopicName );
        //PREPARA
 		answerconn = new MqttConnectionBaseSynch( mqttBrokerAddr, clientid+requestNum, answerTopicName  );

		mqttconn.send( requestMsg.toString() );
		//Attende su topic di risposta
		//String answer = getTheAnswer(answerTopicName, reqid);  
		
		CommUtils.outblue("MqttInteraction | request waits ... on "+answerTopicName );
		String answer = answerconn.receive();
		return new ApplMessage( answer );

	}

	/*
	 * Crea connessione su topic di risposta e attende
	 */
		protected String getTheAnswer(String topicAnswer, String reqid) throws Exception {
			//PREPARO LA CONNESSIONE PER LA RISPOSTA
			answerconn = new MqttConnectionBaseSynch( mqttBrokerAddr, clientid+reqid, topicAnswer );
			String answer = answerconn.receive();
			CommUtils.outcyan("MqttInteraction | getTheAnswer return:" + answer);
			return answer;
		}

		/*
		 * 	
		 */
			
			
	@Override
	public IApplMessage request(IApplMessage msg, int tout) throws Exception {
		CommUtils.outred("MqttInteraction | request con tout todo"  ); 
		return null;
	}

	@Override
	public void reply(IApplMessage msg) throws Exception {
		String dest  = msg.msgReceiver();
		String reqid = msg.msgId();
		String answerTopicName = "answ_"+reqid+"_"+dest;
		CommUtils.outcyan("MqttInteraction | reply answerTopicName=" + answerTopicName); 
		mqttconn.publish(answerTopicName, msg.toString());
		CommUtils.outcyan("MqttInteraction | reply DONE:" + msg); 		
		
	}

	protected void sendAnswer(String topicAnswer, String answer) {
//		CommUtils.outcyan("MqttInteractionBase | sendTheAnswer on " + topicAnswer);
//	answerconn = new MqttConnectionBaseSynch( mqttBrokerAddr, clientid+requestNum, topicAnswer  );
	answerconn.publish(topicAnswer, answer);
	answerconn.disconnect();	 
}

	@Override
	public IApplMessage receive() throws Exception {
//		String msg = mqttconn.receive();
//		if( msg == null ) return null;
//		CommUtils.outcyan("MqttInteraction | receive:" + msg); 
//		return new ApplMessage(msg);
		String msg =  super.receiveMsg();
		if( msg == null ) return null;
		return new ApplMessage(msg);
	}

	@Override
	public void close() throws Exception {
		super.close();
		
	}
	
	
/*	
	protected String mqttBrokerAddr;
	protected String topic;
	protected String topicOutput = "";
	protected String topicInput = "";
	protected MqttConnectionBaseSynch mqttconn;
	protected BlockingQueue<String> blockingQueue = new LinkedBlockingDeque<String>(10);
	private String clientid;
	private String answerTopicName;
		
	public MqttInteraction(String mqttBrokerAddr, String clientid, String topic  ) {        
        this.mqttBrokerAddr = mqttBrokerAddr;
        this.clientid       = clientid;
        this.topic          = topic;
        mqttconn  = new MqttConnectionBaseSynch( mqttBrokerAddr,  clientid,  topic);
//        if( alsoreceive )
//        	mqttconn  = new MqttConnectionBase( mqttBrokerAddr,  clientid,  topic);
//        else 
//        	mqttconn  = new MqttConnectionBase( mqttBrokerAddr,  clientid,  topic, null);
    }


	@Override
	public void forward(IApplMessage msg) throws Exception {
		CommUtils.outcyan("forward " + msg  );
		//publish(topicOutput, msg, 2, false);	
		mqttconn.send(msg.toString());
		
	}

	@Override
	public IApplMessage request(IApplMessage requestMsg) throws Exception {
		CommUtils.outblue("request:"+requestMsg );
		String sender   = requestMsg.msgSender();
		String reqid    = requestMsg.msgId();
		String receiver = requestMsg.msgReceiver();
		answerTopicName = "answ_"+reqid+"_"+sender;
		CommUtils.outcyan("MqttInteraction | request answerTopicName="+answerTopicName );
		
		//PREPARO LA CONNESSIONE PER LA RISPOSTA
		MqttConnectionBaseSynch answerconn = new MqttConnectionBaseSynch( mqttBrokerAddr, clientid+reqid, answerTopicName );

		//Invio la richiesta  
		mqttconn.send(requestMsg.toString());
		//ATTENDO LA RISPOSTA		
		String answer = answerconn.receive();
		CommUtils.outcyan("MqttInteraction | request answer="+answer  );
		answerconn.disconnect();
		return new ApplMessage(answer);
	}
	


	@Override
	public IApplMessage request(IApplMessage msg, int tout) throws Exception {
		return null;
	}


	@Override
	public void reply(IApplMessage msg) throws Exception {
			String dest  = msg.msgReceiver();
			String reqid = msg.msgId();
			String answerTopicName = "answ_"+reqid+"_"+dest;
			CommUtils.outcyan("MqttInteraction | reply answerTopicName=" + answerTopicName); 

			mqttconn.publish(answerTopicName, msg.toString());
			CommUtils.outcyan("MqttInteraction | reply DONE:" + msg); 		
	}

	@Override
	public IApplMessage receive() throws Exception {
		String msg = mqttconn.receive();
		if( msg == null ) return null;
		CommUtils.outcyan("MqttInteraction | receive:" + msg); 
		return new ApplMessage(msg);
	}

	public void close( )  throws Exception{
		mqttconn.disconnect();
	}
 
*/	
 
}

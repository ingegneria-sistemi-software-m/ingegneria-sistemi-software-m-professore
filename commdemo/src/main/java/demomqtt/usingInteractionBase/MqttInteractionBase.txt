package demomqtt.usingInteractionBase;
import demomqtt.usingConnBase.blocking.MqttConnectionBaseSynch;
import unibo.basicomm23.interfaces.Interaction2021;
import unibo.basicomm23.msg.ApplMessage;
import unibo.basicomm23.utils.CommUtils;

/*

 
 */
public class MqttInteractionBase implements Interaction2021{
	protected String mqttBrokerAddr;
	protected String topic, answerTopicName;
	protected String clientid;
	protected MqttConnectionBaseSynch mqttconn, answerconn;
	protected int requestNum;
	
 
	public MqttInteractionBase( String mqttBrokerAddr, String clientid, String topic  ) {
		this.mqttBrokerAddr = mqttBrokerAddr;
		this.clientid        = clientid;
		this.topic           = topic;
		 mqttconn  = new MqttConnectionBaseSynch ( mqttBrokerAddr,  clientid,  topic);
//		if( sendonly ) mqttconn  = new ( mqttBrokerAddr,  clientid,  topic, null );
//		else mqttconn  = new MqttConnectionBase( mqttBrokerAddr,  clientid,  topic);
    }
	@Override
	public void forward(String msg) throws Exception {
		mqttconn.publish(topic, msg);
	}

	@Override
	public String request(String requestMsg) throws Exception {
//		requestNum++;
////		CommUtils.outyellow("MqttInteractionBase | request requestNum=" + requestNum);
//		//troppo labile. Sarebbe bene avere un id univoco in msg
//		mqttconn.send( msg );
//		//Attende su topic di risposta
//		String answer = getTheAnswer(topic+"_answ_");  		
//		//String answer = waitTheAnwer( msg  );
//		return answer;
		requestNum++;
		answerTopicName = topic+"_answ_";
		CommUtils.outcyan("MqttInteraction | request answerTopicName="+answerTopicName );
        //PREPARA
 		answerconn = new MqttConnectionBaseSynch( mqttBrokerAddr, clientid+requestNum, answerTopicName  );

		mqttconn.send( requestMsg.toString() );
		//Attende su topic di risposta
		//String answer = getTheAnswer(answerTopicName, reqid);  
		
		CommUtils.outblue("MqttInteraction | request waits ... on "+answerTopicName );
		String answer = answerconn.receive();
		return  answer ;
	}
	
 

	@Override
	public void reply(String msg) throws Exception {
//		CommUtils.outcyan("MqttInteractionBase | reply with requestNum=" + requestNum);
		sendTheAnswer(topic+"_answ_", msg);
 
	}

	@Override
	public String receiveMsg() throws Exception {
//		CommUtils.outyellow("MqttInteractionBase | receiveMsg requestNum=" + requestNum);
		String msg = mqttconn.receive();
 		return msg;
	}

	@Override
	public void close() throws Exception {
		mqttconn.disconnect();
	}

/*
 * Crea connessione su topic di risposta e attende
 */
//	protected String getTheAnswer(String topicAnswer) throws Exception {
////		CommUtils.outcyan("MqttInteractionBase | getTheAnswer on " + topicAnswer + " clientid=" + clientid+requestNum);		
//		//Creo connessione a topicAnswer di un nuovo client per ricevere reply
//		//inviata dal receiver
//		answerconn = new MqttConnectionBaseSynch( mqttBrokerAddr, clientid+requestNum, topicAnswer );
//		String answer = answerconn.receive();
////		CommUtils.outcyan("MqttInteractionBase | getTheAnswer return:" + answer);
//		return answer;
//	}

/*
 * 	
 */
	
	protected String sendTheAnswer(String topicAnswer, String answer) {
//		CommUtils.outcyan("MqttInteractionBase | sendTheAnswer on " + topicAnswer);
		answerconn = new MqttConnectionBaseSynch( mqttBrokerAddr, clientid+requestNum, topicAnswer  );
		answerconn.publish(topicAnswer, answer);
		answerconn.disconnect();
		return answer;
	}

}

package demomqtt.usingMqttConnection25;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import demomqtt.usingConnBase.blocking.MqttConnectionBaseSynch;
import unibo.basicomm23.interfaces.IApplMessage;
import unibo.basicomm23.interfaces.Interaction;
import unibo.basicomm23.mqtt.MqttConnectionCallbackForReceive;
import unibo.basicomm23.msg.ApplMessage;
import unibo.basicomm23.utils.ColorsOut;
import unibo.basicomm23.utils.CommUtils;

/*
 * 
 * LEVEL 
 */
public class MqttConnection25 implements Interaction{
	protected String mqttBrokerAddr;
	protected String topicOutput = "";
	protected String topicInput = "";
	protected MqttConnectionBaseSynch mqttconn, mqttconnIn;
//	protected BlockingQueue<String> blockingQueue = new LinkedBlockingDeque<String>(10);
	private String clientid;
	private String answerTopicName;	

	public static synchronized MqttConnection25 create( String mqttBrokerAddr, String entry ) {
			String[] parts = entry.split("-");
			String clientName = parts[0];
			String topicIn    = parts[1];
			String topicOut   = parts[2];
			MqttConnection25 mqttSup = new MqttConnection25(clientName, mqttBrokerAddr, topicIn, topicOut);
		return mqttSup;
	}

    public MqttConnection25(String clientName, String mqttBrokerAddr, String topicIn, String topicOut) { 
    	this.mqttBrokerAddr = mqttBrokerAddr;
    	CommUtils.outblack("NEW25!! " + clientName + " topicIn=" + topicIn + " topicOut=" + topicOut + " brker=" + mqttBrokerAddr);

    	clientid    = clientName;
    	topicOutput = topicOut;
    	topicInput  = topicIn;
    	
    	mqttconn = new MqttConnectionBaseSynch( mqttBrokerAddr,  clientid+"_out",  topicOut ); 
    	
//    	mqttconn.subscribe( topicIn, new MqttConnectionCallbackForReceive(clientid, blockingQueue) );
    	mqttconnIn= new MqttConnectionBaseSynch( mqttBrokerAddr,  clientid+"_in",  topicIn ); 
    	
    	
    }

	@Override
	public void forward(IApplMessage msg) throws Exception {
		//CommUtils.outgreen(clientid + " MqttConnection25 | forward " + msg  );
		mqttconn.send(msg.toString());
		
	}

	@Override
	public IApplMessage request(IApplMessage requestMsg) throws Exception {
		//CommUtils.outblue("MqttConnection25 | request:"+requestMsg + " mqttBrokerAddr=" + mqttBrokerAddr);
		String sender   = requestMsg.msgSender();
		String reqid    = requestMsg.msgId();
		String receiver = requestMsg.msgReceiver();
		answerTopicName = "answ_"+reqid+"_"+sender;
		//CommUtils.outcyan("MqttConnection25 | request answerTopicName="+answerTopicName );
		
		//PREPARO LA CONNESSIONE PER LA RISPOSTA
		//CommUtils.outcyan(clientid + " MqttConnection25 | create " + clientid+reqid + " for receive on:" + answerTopicName); 
		MqttConnectionBaseSynch answerconn = 
				new MqttConnectionBaseSynch( mqttBrokerAddr, clientid+reqid, answerTopicName );

		//Invio la richiesta  
		mqttconn.send(requestMsg.toString());
		//ATTENDO LA RISPOSTA		
		String answer = answerconn.receive();
		//CommUtils.outcyan("MqttConnection25 | request answer="+answer  );
		answerconn.disconnect();
		return new ApplMessage(answer);
	}
	

	@Override
	public IApplMessage request(IApplMessage msg, int tout) throws Exception {
		return null;
	}


	@Override
	public void reply(IApplMessage msg) throws Exception {
			String dest  = msg.msgReceiver();
			String reqid = msg.msgId();
			String answerTopicName = "answ_"+reqid+"_"+dest;
			//CommUtils.outcyan("MqttConnection25 | reply answerTopicName=" + answerTopicName); 
			mqttconn.publish(answerTopicName, msg.toString());
			//CommUtils.outcyan("MqttConnection25 | reply DONE:" + msg); 		
	}

	@Override
	public IApplMessage receive() throws Exception {
//		String msg = blockingQueue.take();
		String msg = mqttconnIn.receive();
		//CommUtils.outred(clientid + " MqttConnection25 | received:" + msg + " blockingQueue:" + blockingQueue.size()); 
		if( msg == null ) return null;
		try {
		    IApplMessage msgAnswer = new ApplMessage(msg); //answer is structured
            msg = msgAnswer.toString();
            return  msgAnswer;
		} catch (Exception e) {
			CommUtils.outyellow("MqttConnection25 | received a non IApplMessage");
			return null;
		}
	}
 
/*
 * 
 */

	@Override
	public void forward(String msg) throws Exception {
		mqttconn.send( msg );
		
	}

	@Override
	public String request(String msg) throws Exception {
		IApplMessage requestMsg;
		try{
			 requestMsg = new ApplMessage(msg); //no exception => we can publish
		}catch( Exception e ) { //The message is not structured
			ColorsOut.outerr("MqttConnection25 | request warning:" + e.getMessage());
			requestMsg = CommUtils.buildRequest("mqtt", "request", msg, "unknown");
		}			
        IApplMessage answer = request(requestMsg);
        return answer.toString();}

	@Override
	public void reply(String msg) throws Exception {
		try {
			ApplMessage m = new ApplMessage(msg);
			reply(m);
 		}catch(Exception e) {
			ColorsOut.outerr("MqttConnection25 | reply msg not structured " + msg);
		}		
	}

	@Override
	public String receiveMsg() throws Exception {
		//CommUtils.outyellow("MqttConnection25 | receiveMsg ... blockingQueue=" + blockingQueue.size()  );
		String answer = "data unknown ...";
 		try {
//			answer = blockingQueue.take();
			answer = mqttconnIn.receive();
			//ColorsOut.outappl("MqttConnection25 | receiveMsg answer="+answer + " blockingQueue.size=" + blockingQueue.size() , ColorsOut.CYAN);
			IApplMessage msgAnswer = new ApplMessage(answer); //answer is structured
			answer = msgAnswer.toString();
		    //ColorsOut.outappl("MqttConnection25 | receiveMsg answer=" + answer , ColorsOut.CYAN);
		}catch( Exception e){
 			//CommUtils.outyellow("MqttConnection25 | received a non IApplMessage"  );
		}
		return answer;
	}

	@Override
	public void close() throws Exception {
		mqttconn.disconnect();	
		mqttconnIn.disconnect();
	}
 
}

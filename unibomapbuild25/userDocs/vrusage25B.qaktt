System virtualrobotusage25
//mqttBroker "localhost" : 1883 eventTopic "sonarbw24data"

 /*  
========================================
vrusage25B.qak
========================================
*/  
/*
 * Percorre il boundary della stanza (SUPPOSTO PRIVO DI OSTACOLI)
 * e si ferma per 2 secs quando rilevato dal SONAR
 * 
 * Accede al virtual robot usando il SERVIZIO vrqak
 * (progetto vrqak)
 * operando come un suo observer
 * 
 * vrqak è una risorsa che fa updateResource( sonarData(D) )
 * La qakinfreastructure gestisce questa priimitva generando
 * 
 * - il dispatch vrupdate : changed(sonarData(D) )   
 *   per ogni attore  che abbia fatto   (come fa qui vrboundary) 
 *  observeResource vrqak msgid vrupdate

 */
  
Dispatch move       : move(M)  
 
Request  step       : step(T)
Reply   stepdone    : stepdone(X) for step
Reply   stepfailed  : stepfailed(X) for step

Event  sonardata    : sonar( DISTANCE ) 
Event  obstacle     : obstacle(D)	   
 
Dispatch vrupdate     : changed(A)     //since observeResource vrqak. Il payload


//Gi eventi sonardata emessi da VrobotLLMoves24 non escono da vqak
//perch' il servizio vrqak NON CONOSCE I CONTSTI APPLICATIVI
Event  sonardata   : sonar( DISTANCE ) 	 //Just to test event visibility
 
Context ctxvrusage25  ip [host="localhost"   port=8120  ]
Context ctxvrqak      ip [host="127.0.0.1"   port=8125  ]

ExternalQActor vrqak context ctxvrqak  //Risorsa esterna che permette l'accesso al (virtual)robot
  
  
/*
 * Accede al virtual robot usando vrqak
 */
 QActor vrboundary context ctxvrusage25   {
 	[# var N=0 #]  
	State s0 initial{ 
		delay 1500
		println("$name STARTS") color blue 
		observeResource vrqak msgid vrupdate
        forward vrqak -m move : move(h)  //resetto eventuali not_allowed	
     }
	Goto doboundary
	 
	State doboundary{
		delay 200
		println("$name | doboundary ") color blue 
		request vrqak -m step : step(350)
	} 
	Transition t0 
	    whenMsg vrupdate      -> handlevrupdate
	    whenReply stepdone    -> doboundary
	    whenReply stepfailed  -> turnAndgo
//        whenMsg stop          -> handleStop   
         
	State turnAndgo{
		println("$name | turnAndgo ") color blue 
		[# N = N + 1 #]
 		forward vrqak -m move : move(l)
		if [# N == 4 #]{
			delay 300
			[# System.exit(0) #]
		}  
	}
	Goto doboundary
	    
	/*
	 * in questo stato c'è un dispatch 
	 * stepdone/stepfailed  in coda 
	 */
	State handlevrupdate{
		printCurrentMessage color yellow
		onMsg( vrupdate : changed( INFO) ){
			[#   val info = payloadArg(0) #] 
			println("$name | handlevrupdate $info") color green
			if [# info.contains("sonardata") #]{
			 	println("$name | handlevrupdate $info") color magenta
				delay 2000 //DOING PAUSE!!
			}  
		}		 
	} 
	Transition t0 
	    whenMsg vrupdate        -> handlevrupdate
	    whenReply stepdone    -> doboundary       //quello in sospeso
	    whenReply stepfailed  -> turnAndgo
 
 	State handleStop{
		printCurrentMessage color magenta
		delay 2000 //AVOID TO BLCOK just for testing ...
	}	
	Transition t0 
 	    whenMsg vrupdate        -> handlevrupdate
	    whenReply stepdone    -> doboundary       //quello in sospeso
	    whenReply stepfailed  -> turnAndgo
//        whenMsg stop          -> handleStop 
 
 }

  
QActor vrobserver context ctxvrusage25{
	State s0 initial{ 
		println("$name | READY") color cyan
	}
	Transition t0
//		whenEvent vrupdate    -> handlevrupdate
		whenEvent sonardata -> handleSonardata
//		whenEvent obstacle  -> handleObstacle

	State handleSonardata{
		printCurrentMessage color magenta
	}	
//	Goto s0 //PERDE GLI EVENTI
	Transition t0
//		whenEvent vrupdate    -> handlevrupdate
		whenEvent sonardata -> handleSonardata
//		whenEvent obstacle  -> handleObstacle
	
//	State handleObstacle{
//		printCurrentMessage color cyan
//		forward vrboundary -m stop : stop(1)
//	}	
//	Transition t0
////		whenEvent vrupdate    -> handlevrupdate
////		whenEvent sonardata -> handleSonardata
//        whenTime  2000      -> s0
//		whenEvent obstacle  -> ignoreObstacle
	
	State ignoreObstacle{
		println("$name | ignore obstacle") color cyan
	}
	Transition t0
//		whenEvent vrupdate    -> handlevrupdate
//		whenEvent sonardata -> handleSonardata
        whenTime  2000      -> s0
		whenEvent obstacle  -> ignoreObstacle
	
//	State handlevrupdate{ 
//		printCurrentMessage color black
//	}	
////	Goto s0  //PERDE GLI EVENTI
//	Transition t0
////		whenEvent vrupdate    -> handlevrupdate
//		whenEvent sonardata -> handleSonardata
//		whenEvent obstacle  -> handleObstacle

}

 

 
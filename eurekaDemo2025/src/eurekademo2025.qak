System eurekaexample  

Dispatch m1 : m1(X)
Request r1 : r1(X)
Reply r1reply : r1rely(X) for r1

Event alarm : alarm(X)

Context ctxeureka ip [host="localhost" port=8443]

QActor aservice context ctxeureka{ 
[# 
	fun register(){
		
		if( CommUtils.ckeckEureka( ) ){
			val discoveryclient = CommUtils.registerService( main.java.EurekaServiceConfig() )
			CommUtils.outblue("discoveryclient=$discoveryclient ")
		}
	}
#]	
	State s0 initial{
		println("$name | STARTS") color magenta
		[# register() #]
	}
	Goto work
	
	State work{
		println("$name | waiting ... ") color magenta
	}
	Transition t0 
		whenMsg    m1   -> handlem1
		whenRequest r1  -> handler1
		whenEvent alarm -> handleAlarm
		
	State handlem1{
		printCurrentMessage color blue
	}
	Goto work

	State handler1{
		printCurrentMessage color green
		//emit alarm : alarm(server)
		replyTo r1 with r1reply : r1reply(welcome)
	}
	Transition t0 
		whenMsg    m1  -> handlem1
		whenRequest r1 -> handler1
		whenEvent alarm -> handleAlarm
	
	State handleAlarm{
		printCurrentMessage color magenta
		
	}
	Transition t0 
		whenMsg    m1  -> handlem1
		whenRequest r1 -> handler1
		whenEvent alarm -> handleAlarm
}
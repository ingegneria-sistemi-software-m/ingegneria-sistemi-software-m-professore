/* Generated by AN DISI Unibo */ 
package it.unibo.bwbrcore

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Bwbrcore ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 var N = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1000) 
						CommUtils.outyellow("$name | STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engage", cond=doswitch() )
				}	 
				state("engage") { //this:State
					action { //it:State
						delay(2000) 
						CommUtils.outyellow("$name | $MyName engaging ... ")
						request("engage", "engage($MyName,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="showMap",cond=whenReply("engagedone"))
					transition(edgeName="t01",targetState="end",cond=whenReply("engagerefused"))
				}	 
				state("testMoves") { //this:State
					action { //it:State
						CommUtils.outblue("$name | testMoves")
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						delay(500) 
						forward("cmd", "cmd(z)" ,"basicrobot" ) 
						delay(500) 
						delay(500) 
						forward("cmd", "cmd(z)" ,"basicrobot" ) 
						delay(500) 
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="showMap",cond=whenReply("stepdone"))
					transition(edgeName="t03",targetState="showMap",cond=whenReply("stepfailed"))
				}	 
				state("showMap") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | $MyName getenvmap ... ")
						request("getenvmap", "getenvmap(caller)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="showTheMap",cond=whenReply("envmap"))
				}	 
				state("showTheMap") { //this:State
					action { //it:State
						CommUtils.outblue("$name | showTheMap ")
						if( checkMsgContent( Term.createTerm("envmap(MAP)"), Term.createTerm("envmap(MAP)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val MAP = payloadArg(0).replace("@","\n")  
								CommUtils.outblack(MAP)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="gotoCell", cond=doswitch() )
				}	 
				state("gotoCell") { //this:State
					action { //it:State
						CommUtils.outblue("$name | gotoCell setrobotstate ")
						forward("setrobotstate", "setpos(0,0,down)" ,"basicrobot" ) 
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						delay(500) 
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						delay(1500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="backToHome",cond=whenReply("moverobotdone"))
				}	 
				state("backToHome") { //this:State
					action { //it:State
						CommUtils.outblack("$name | backToHome")
						forward("setdirection", "dir(left)" ,"basicrobot" ) 
						delay(1000) 
						request("moverobot", "moverobot(0,0)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="atHome",cond=whenReply("moverobotdone"))
				}	 
				state("atHome") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | athome")
						forward("setdirection", "dir(down)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="explore", cond=doswitch() )
				}	 
				state("explore") { //this:State
					action { //it:State
						request("doplan", "doplan(ww,350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="imaginedone",cond=whenReply("doplandone"))
					transition(edgeName="t08",targetState="disengage",cond=whenReply("doplanfailed"))
				}	 
				state("imaginedone") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | where am I ?")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="disengage", cond=doswitch() )
				}	 
				state("disengage") { //this:State
					action { //it:State
						CommUtils.outblack("$name | disengage")
						forward("disengage", "disengage(ok)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("end") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | ENDS ")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 

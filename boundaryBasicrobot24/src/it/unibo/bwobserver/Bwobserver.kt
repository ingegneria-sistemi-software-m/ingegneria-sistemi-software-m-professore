/* Generated by AN DISI Unibo */ 
package it.unibo.bwobserver

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Bwobserver ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 var PauseSent = false  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | START")
						observeResource("discoverable","8020","ctxbasicrobot","basicrobot","brdata")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handlebrdata",cond=whenDispatch("brdata"))
				}	 
				state("handlebrdata") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						  
									PauseSent = false 
						if( checkMsgContent( Term.createTerm("changed(Y)"), Term.createTerm("changed(M)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val data = payloadArg(0)  
								if(  data.contains("sonar")  
								 ){ PauseSent = true  
								forward("pause", "pause(ok)" ,"bwbrcore" ) 
								 main.resources.UserControl.doBeep()  
								CommUtils.outmagenta("$name | sent pause to bwbrcore $data")
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="ignoredata",cond=whenDispatchGuarded("brdata",{ PauseSent    
					}))
					transition(edgeName="t08",targetState="handlebrdata",cond=whenDispatchGuarded("brdata",{ !PauseSent   
					}))
				}	 
				state("ignoredata") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | ignoredata")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="ignoredata",cond=whenDispatch("brdata"))
					transition(edgeName="t010",targetState="work",cond=whenDispatch("goon"))
				}	 
			}
		}
} 

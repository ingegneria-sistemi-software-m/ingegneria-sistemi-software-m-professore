System bwbscrbt
mqttBroker "localhost" : 1883 eventTopic "robotevents"  //SE definita MQTTBROKER, usa quell'addr
//mqttBroker "broker.hivemq.com" : 1883
 
/*
 * bwbscrbt.qak 
 * usa basicrobot
 * 
 * Percorre il perimetro della stanza e fa una pausa quando rilevato dal sonar
 */ 
   
 /* 
  * Messaggi di interazione con il basicrobot
  */
Request engage        : engage(OWNER, STEPTIME)	
Reply   engagedone    : engagedone(ARG)    for engage
Reply   engagerefused : engagerefused(ARG) for engage
Dispatch disengage    : disengage(ARG)

Dispatch cmd    : cmd( MOVE )  "MOVE = a|d|l|r|h   "
 
Request  cmd    : cmd(MOVE,T)  "MOVE = w|s|p (stepSynch)" 
Reply cmddone   : cmddone(R)          for cmd
Reply cmdfailed : cmdfailed(T,CAUSE)  for cmd

Request step       : step(TIME)	
Reply stepdone     : stepdone(V)                 for step
Reply stepfailed   : stepfailed(DURATION, CAUSE) for step
 
Request  doplan     : doplan( PATH, STEPTIME )
Reply doplandone    : doplandone( ARG )    for doplan
Reply doplanfailed  : doplanfailed( ARG )  for doplan

Request moverobot    :  moverobot(TARGETX, TARGETY)  
Reply moverobotdone  :  moverobotok(ARG)                    for moverobot
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO) for moverobot

Request getrobotstate : getrobotstate(ARG)
Reply robotstate      : robotstate(POS,DIR)  for getrobotstate

Request getenvmap     : getenvmap(X)
Reply   envmap        : envmap(MAP)  for getenvmap

Dispatch setrobotstate: setpos(X,Y,D)

Dispatch setdirection : dir( D )

Event  sonardata   : sonar( DISTANCE ) 	   
Event obstacle     : obstacle(X)  
Event info         : info(X)    
  
 /*
  * Messaggi per questa applicazione
  */
Dispatch brdata    : changed(Y)
Dispatch pause     : pause(X)  
Dispatch goon      : goon(N)   //for automsg in turnandgo
  
Context ctxbwbscrbt   ip [host="localhost"     port=8720   ]
Context ctxbasicrobot ip [host="discoverable"  port=8020   ]  

ExternalQActor basicrobot context ctxbasicrobot   
   
 QActor bwbrcore context ctxbwbscrbt  {
 	[# var N = 0 #] 
	State s0 initial{ 
		println("$name | STARTS") color yellow 
//riguardo alla info enessa da WEnv, bwbrcore potrebbe:
// i) ossservre direttamente ii) osservare delegando iii) NON osservare proprio
		//observeResource basicrobot msgid brdata           
		//delegate brdata to bwobserver
	}  
	Goto engage
	 
	State engage{
		delay 2000
		println("$name | $MyName engaging ... ") color yellow 
		request basicrobot -m engage : engage($MyName,330)
	}
	Transition t0 whenReply engagedone   ->   doboundary  
 	              whenReply engagerefused -> end
 	
  	
 	
	State doboundary{
		delay 200   
		//delay 500
		request basicrobot -m  step : step(350)   
	}
	Transition t0    
//	    whenEvent obstacle    -> stoptherobot
	    whenReply  stepdone   -> doboundary
	    whenReply  stepfailed -> turnandgo
	    whenInterrupt   pause -> pausetherobot
	
	
	
	State turnandgo{
		//printCurrentMessage color red
		[# N = N + 1 #]
		onMsg( stepfailed : stepfailed(T,C)){
			println("$name | turnandgo after ${payloadArg(0)} since ${payloadArg(1)} N=$N" ) color yellow
		}
		forward basicrobot -m cmd : cmd(l) 
		if [# N == 4 #]{
			delay 500
			forward basicrobot -m disengage : disengage($MyName)
			println("$name | EXIT ") color yellow
			[# System.exit(0) #]
		}else {
			autodispatch goon : goon($N)
		}
	}
	Transition t0 
//	    whenEvent obstacle    -> stoptherobot
	    whenMsg   goon        -> doboundary
//	    whenInterrupt   pause -> pausetherobot
	    

	State stoptherobot{
		printCurrentMessage color magenta
		forward basicrobot -m cmd : cmd(h)
	} 
	/* 
	State handleWEnvdata{
		//forward basicrobot -m cmd : cmd(h)
		printCurrentMessage color yellow
		onMsg( brdata : brdata(basicrobot,sonar(D)) ){
			println("$name | pausetherobot") color red
			delay 2500			
		}
		returnFromInterrupt
	} 
	*/
	
	State pausetherobot{
//		forward basicrobot -m cmd : cmd(h)
//  		forward basicrobot -m cmd : cmd(z)  //Asynch CI VUOLE z
		println("$name | pausetherobot") color red
 		delay 1500		
  		forward bwobserver 	-m goon : goon(afterdelay)
		returnFromInterrupt
		//[# System.exit(0) #]
	} 
 
	 
	State end{
		println("$name | ENDS ") color yellow
	}
}

/*
 * Observer della info emessa da WEnv, tra cui i dati del sonar
 */

 
QActor bwobserver context ctxbwbscrbt{
	[# var PauseSent = false #]
 
	State s0 initial{ 
		println("$name | START") color green
		observeResource basicrobot msgid brdata //se coapUpdate
	}
	Goto work
 
    State work{
    	
    }
	Transition t0
		whenMsg brdata -> handlebrdata
		whenEvent info -> handleInfoPerceivedViaMqtt
 
	State handlebrdata{		 
  		printCurrentMessage color green
		[#  
			PauseSent = false 
		#]
 			onMsg( brdata : changed(M) ){
 		 	[# val data = payloadArg(0) #]
//            println("$name | handlebrdata $data") color green
	        if [# data.contains("sonar") #]{
	//         	forward basicrobot -m cmd : cmd(z)  //IGNOTRED since the owner is bwbrcore
	            [# PauseSent = true #]
	            forward bwbrcore -m pause : pause(ok)
	 			[# main.resources.UserControl.doBeep() #] 			
				println("$name | sent pause to bwbrcore $data") color magenta
	 		}	
 		}//onMsg
 	}
	Transition t0
 		whenMsg brdata and [# PauseSent   #] ->  ignoredata
 		whenMsg brdata and [# !PauseSent  #] -> handlebrdata
 
	
	State ignoredata{
		println("$name | ignoredata") color yellow
	}
	Transition t0
 		whenMsg brdata  -> ignoredata
	    whenMsg goon    -> work //bwbrcore ha ripreso
 
 
 
    State handleInfoPerceivedViaMqtt{
    	println("$name | handleInfoPerceivedViaMqtt") color magenta
    	printCurrentMessage
    }
    Goto work
	    
 }


 
/*
QActor sonar24mock context ctxbwbscrbt{
	State s0 initial{ 
		println("$name | START") color yellow
		//delay 8000
		//emit obstacle : obstacle(10)
		println("$name | ENDS")  color yellow
	}  
} 
*/

 
/* Generated by AN DISI Unibo */ 
package it.unibo.storagevolatile

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.storageram.*

class Storagevolatile ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		val storage = StorageOnRam()
		  
				val logger = LoggerFactory.getLogger("storageactor")  
				clearlog("./logs/app_storageramsystem.log") 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						   
						//	        logger.info(  "$name | STARTS" )
						CommUtils.outblack("$name | STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handle_getItem",cond=whenRequest("getItem"))
					transition(edgeName="t01",targetState="handle_deleteItem",cond=whenDispatch("deleteItem"))
					transition(edgeName="t02",targetState="handle_allitems",cond=whenRequest("getAllItems"))
					transition(edgeName="t03",targetState="handle_createItem",cond=whenDispatch("createItem"))
				}	 
				state("handle_createItem") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("item(ITEMID,JSONSTR)"), Term.createTerm("item(K,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val K  = payloadArg(0).toInt()
												val V  = payloadArg(1)    //perde gli apici				
								                val VP = sysUtil.toPrologStr(V)  //rimette gli apici
											   //CommUtils.outmagenta("payloadArg(1) = $V VP=$VP") 
								               storage.put( K, VP )
											   logger.info(  "put $VP in $K" ) 
								CommUtils.outblue("$name |  handle_createItem $VP")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handle_getItem",cond=whenRequest("getItem"))
					transition(edgeName="t05",targetState="handle_deleteItem",cond=whenDispatch("deleteItem"))
					transition(edgeName="t06",targetState="handle_allitems",cond=whenRequest("getAllItems"))
					transition(edgeName="t07",targetState="handle_createItem",cond=whenDispatch("createItem"))
				}	 
				state("handle_getItem") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 var V = "unknown"  
						if( checkMsgContent( Term.createTerm("item(ITEMID)"), Term.createTerm("item(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	val K = payloadArg(0).toInt() 
												CommUtils.outblue("handle_getItem $K")
												//deve restituire una stringa come contenuto di un IApplMessage
												//ho già provveduto nel momemto della put
												V     = storage.get( K )  //potrebbe dare 0 => Product(0) => error
												CommUtils.outblue("handle_getItem get=$V")
												logger.info(  "get $V from $K" )
						}
						answer("getItem", "getItemAnswer", "item($V)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="handle_getItem",cond=whenRequest("getItem"))
					transition(edgeName="t09",targetState="handle_deleteItem",cond=whenDispatch("deleteItem"))
					transition(edgeName="t010",targetState="handle_allitems",cond=whenRequest("getAllItems"))
					transition(edgeName="t011",targetState="handle_createItem",cond=whenDispatch("createItem"))
				}	 
				state("handle_deleteItem") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 var V = "unknown"  
						if( checkMsgContent( Term.createTerm("item(ITEMID)"), Term.createTerm("item(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	val K = payloadArg(0).toInt() 
												CommUtils.outblue("handle_deleteItem $K")
												V     = storage.delete( K ).toString()  //V boolean
												CommUtils.outblue("handle_deleteItem result:$V")
												logger.info( "handle_deleteItem result:$V" )
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="handle_getItem",cond=whenRequest("getItem"))
					transition(edgeName="t013",targetState="handle_deleteItem",cond=whenDispatch("deleteItem"))
					transition(edgeName="t014",targetState="handle_allitems",cond=whenRequest("getAllItems"))
					transition(edgeName="t015",targetState="handle_createItem",cond=whenDispatch("createItem"))
				}	 
				state("handle_allitems") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 var V = "unknown"  
						if( checkMsgContent( Term.createTerm("dummy(ID)"), Term.createTerm("dummy(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	  
								  				V     = storage.getAllItems(   ).toString()  
												CommUtils.outblue("handle_allitems:$V")
												//logger.info(  "get $V from $K" )
								answer("getAllItems", "getAllItemsAnswer", "products($V)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="handle_getItem",cond=whenRequest("getItem"))
					transition(edgeName="t017",targetState="handle_deleteItem",cond=whenDispatch("deleteItem"))
					transition(edgeName="t018",targetState="handle_allitems",cond=whenRequest("getAllItems"))
					transition(edgeName="t019",targetState="handle_createItem",cond=whenDispatch("createItem"))
				}	 
			}
		}
} 

/* Generated by AN DISI Unibo */ 
package it.unibo.gamemaster

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import unibo.basicomm23.mqtt.*

class Gamemaster ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
		 	var RowsN = 0
		 	var ColsN = 0
		 
		    var NAllCells      =  0  //set in s0
		    var NCellsCreated  =  0  //set in handlecellecreated 		
		    var NCellended     =  0  //set in terminatethegame
		 	var NCellReady     =  0
		 	
		 	var LastI = 0
			var LastJ = 0
		 	
		 	var stopped  = false
		 	var EpochNum = 0
			
		
			fun register(){
				
				if( CommUtils.ckeckEureka( ) ){
					val discoveryclient = CommUtils.registerService( main.java.EurekaServiceConfig() )
					CommUtils.outblue("discoveryclient=$discoveryclient ")
				}
			}
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name | REGISTER ... ")
						 		  
								register()
								
								val res = conway.GridSupport25.readCellNum("gridConfig.json")
								RowsN     = res.get(0)
								ColsN     = res.get(1)
								NAllCells = RowsN * ColsN      
						CommUtils.outblue("$name | RowsN=$RowsN ColsN=$ColsN")
						CommUtils.outmagenta("$name | READY TO ACCEPT CELLS ... ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleAddtogame",cond=whenRequest("addtogame"))
				}	 
				state("handleAddtogame") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outblack("$name | LastI=$LastI LastJ=$LastJ RowsN=$RowsN ColsN=$ColsN")
						if(  LastJ == ColsN  
						 ){if(  LastI == RowsN  
						 ){ val CelName = "rejected_0_0"  
						answer("addtogame", "addedtogame", "addedtogame($CelName,0,0)"   )  
						}
						else
						 { LastI++; LastJ = 0  
						  val CelName = "cell_${LastI}_$LastJ"  
						 answer("addtogame", "addedtogame", "addedtogame($CelName,$RowsN,$ColsN)"   )  
						   LastJ++  
						 }
						}
						else
						 { val CelName = "cell_${LastI}_$LastJ"  
						 answer("addtogame", "addedtogame", "addedtogame($CelName,$RowsN,$ColsN)"   )  
						   LastJ++  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="handleAddtogame",cond=whenRequest("addtogame"))
					transition(edgeName="t02",targetState="handleCellcreated",cond=whenDispatch("cellcreated"))
				}	 
				state("handleCellcreated") { //this:State
					action { //it:State
						 NCellsCreated++  
						CommUtils.outmagenta("$name |  CREATED $NCellsCreated cells ")
						if(  NCellsCreated ==  NAllCells  
						 ){CommUtils.outmagenta("$name | ALL CELL $NAllCells CREATED !!!! ")
						forward("allcellready", "allcellready(ok)" ,name ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="handleAddtogame",cond=whenRequest("addtogame"))
					transition(edgeName="t04",targetState="handleCellcreated",cond=whenDispatch("cellcreated"))
					transition(edgeName="t05",targetState="orchestrateTheGame",cond=whenDispatch("allcellready"))
				}	 
				state("orchestrateTheGame") { //this:State
					action { //it:State
						CommUtils.outblue("$name | orchestrateTheGame")
						emit("allcellready", "allcellready(ok)" ) 
						 main.java.OutInMasterGui(myself, "guiin")  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handleCellReady",cond=whenDispatch("cellready"))
				}	 
				state("handleCellReady") { //this:State
					action { //it:State
						 NCellReady++  
						if(  NCellReady == NAllCells  
						 ){ NCellReady=0  
						 EpochNum++  
						forward("epochDone", "epochDone(EpochNum)" ,name ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="handleCellReady",cond=whenDispatch("cellready"))
					transition(edgeName="t08",targetState="continueTheGame",cond=whenDispatch("epochDone"))
				}	 
				state("continueTheGame") { //this:State
					action { //it:State
						CommUtils.outblack("$name | continueTheGame($MyName) epoch = EpochNum $EpochNum stopped=$stopped")
						delay(500) 
						emit("synch", "synch(ok)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="handleCellReady",cond=whenDispatch("cellready"))
				}	 
			}
		}
} 

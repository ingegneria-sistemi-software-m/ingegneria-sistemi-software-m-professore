/* Generated by AN DISI Unibo */ 
package it.unibo.unibologkb

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Unibologkb ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
			 fun register(){		
				if( CommUtils.ckeckEureka( ) ){
					val discoveryclient = CommUtils.registerService( main.java.EurekaServiceConfig() )
					CommUtils.outblue("discoveryclient=$discoveryclient ")
				}
			  }			
				
		 	  fun getCurrentDateTimeString(): String {
				    val currentDateTime = java.time.LocalDateTime.now()
				    val formatter = java.time.format.DateTimeFormatter.ofPattern("EEEE HH:mm:ss")
				    return currentDateTime.format(formatter)
			  }
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('unibologger.pl')","") //set resVar	
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('unibologRules.pl')","") //set resVar	
						 		  
								//CommUtils.ckeckEureka( )	
								val T = getCurrentDateTimeString()	
						CommUtils.outblue("$name | register ctxunibologger $T")
						  register()  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outcyan("$name | waiting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handlelogsimple",cond=whenEvent("unibolog"))
					transition(edgeName="t01",targetState="handlelogprolog",cond=whenEvent("unibologprolog"))
				}	 
				state("handlelogsimple") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("unibolog(X)"), Term.createTerm("unibolog(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val logvalue = payloadArg(0)  
								CommUtils.outcyan("$name | perceives $logvalue")
								solve("addRule(logitem('$logvalue'))","") //set resVar	
						}
						CommUtils.outblack("$name | current logs:")
						solve("showAllLogs","") //set resVar	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handlelogprolog") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("unibologprolog(SOURCE,CATEG,CONTENT)"), Term.createTerm("unibologprolog(SOURCE,CATEG,CONTENT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val logsource = payloadArg(0) 
								  		   val logcateg  = payloadArg(1)
								  		   val logval    = payloadArg(2)
								CommUtils.outmagenta("$name | perceives $logsource, $logcateg, $logval ")
								solve("assert(logitem('$logsource','$logcateg','$logval'))","") //set resVar	
						}
						CommUtils.outmagenta("$name | current prolog logs:")
						solve("showAllPrologLogs","") //set resVar	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
